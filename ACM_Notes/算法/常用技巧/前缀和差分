# 等差数列区间修改

## 差分实现：等差数列型区间修改

差分实现区间[l,r]+x修改：`c[l]+=x,c[r+1]-=x;`

但是若对[l,r]区间加上*首项为a，公差为d*的等差数列，就需要：`c[l]+=a,c[l+1]+=d,,c[l+2]+=d...,c[r-1]+=d,c[r]+=d,c[r+1]-=a`。可以观察到，需要多差分数组中区间[l+1,r]进行区间+d下修改，于是可以利用**二阶差分数组**

|                             |  1   |    2    |     3     |     4      |     5      |     6     |        7         |       8        |  9   |
| :-------------------------: | :--: | :-----: | :-------: | :--------: | :--------: | :-------: | :--------------: | :------------: | :--: |
| 原序列：对区间[2,6]进行修改 |  0   | 0+**a** | 0+**a+x** | 0+**a+2x** | 0+**a+3x** | 0**a+4x** |        0         |       0        |  0   |
|          一阶差分           |  0   | 0**+a** |  0**+x**  |  0**+x**   |  0**+x**   |  0**+x**  |  0**-a-(r-l)x**  |       0        |  0   |
|          二阶差分           |  0   | 0**+a** | 0**-a+x** |     0      |     0      |     0     | 0**-a-(r-l+1)x** | 0**+a+(r-l)x** |      |

### 方法1：一阶差分+一次前缀和

[例题：无聊的数列](https://www.luogu.com.cn/problem/P1438)

```c++
//两次单点修改，一次区间修改
c[l]+=a;//单点修改l
c[l...r]+=x;//区间修改l...r
c[r+1]-=(a+(r-l)x)//单点修改r+1
```

```c++
#include<bits/stdc++.h>
#include<iomanip>
#define ll long long
#define ull unsigned long long
#define inf 0x3f3f3f3f3f3f3f3f
#define mod1 998244353
#define mod2 1000000007
#define P pair<ll,ll>
using namespace std;

const ll maxn=1e5+10;
ll n,m;
ll num[maxn],b[maxn];
struct node{
    ll l,r,sum,lazy;
    node(ll x=0,ll y=0,ll z=0,ll k=0):l(x),r(y),sum(z),lazy(k){}
}a[5*maxn];

void update(ll k){
    a[k].sum=a[2*k].sum+a[2*k+1].sum;
}

void build(ll k,ll l,ll r){
    a[k].l=l,a[k].r=r;
    if(l==r){
        a[k].sum=num[l];
        // cout<<k<<' '<<a[k].l<<' '<<a[k].r<<' '<<a[k].sum<<endl;
        return;
    }
    ll mid=(l+r)/2;
    build(2*k,l,mid);
    build(2*k+1,mid+1,r);
    update(k);
    // cout<<k<<' '<<a[k].l<<' '<<a[k].r<<' '<<a[k].sum<<endl;
}

void pushdown(ll k){
    if(a[k].l==a[k].r){
        a[k].lazy=0;
        return;
    }
    a[k*2].sum+=a[k].lazy*(a[2*k].r-a[2*k].l+1);
    a[2*k+1].sum+=a[k].lazy*(a[2*k+1].r-a[2*k+1].l+1);
    a[2*k].lazy+=a[k].lazy;
    a[2*k+1].lazy+=a[k].lazy;
    a[k].lazy=0;
}

void change(ll k,ll l,ll r,ll x){
    if(a[k].l==l&&a[k].r==r){
        a[k].sum+=(r-l+1)*x;
        a[k].lazy+=x;
        return;
    }
    if(a[k].lazy)pushdown(k);
    ll mid=(a[k].l+a[k].r)/2;
    if(r<=mid)change(2*k,l,r,x);
    else if(l>mid)change(2*k+1,l,r,x);
    else change(2*k,l,mid,x),change(2*k+1,mid+1,r,x);
    update(k);
}

ll query(ll k,ll l,ll r){
    if(a[k].l==l&&a[k].r==r){
        return a[k].sum;
    }
    if(a[k].lazy)pushdown(k);
    ll mid=(a[k].l+a[k].r)/2;
    if(r<=mid)return query(2*k,l,r);
    else if(l>mid)return query(2*k+1,l,r);
    else return query(2*k,l,mid)+query(2*k+1,mid+1,r);
}

void solve(){
    cin>>n>>m;
    for(ll i=1;i<=n;i++)cin>>b[i];
    for(ll i=1;i<=n+1;i++)num[i]=b[i]-b[i-1];
    build(1,1,n+3);
    while(m--){
        ll op;cin>>op;
        if(op==1){
            ll l,r,k,d;
            cin>>l>>r>>k>>d;
            change(1,l,l,k);
            if(l+1<=r)change(1,l+1,r,d);
            change(1,r+1,r+1,-k-(r-l)*d);
        }
        else{
            ll x;
            cin>>x;
            cout<<query(1,1,x)<<endl;
        }
    }
}
int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    solve();
    return 0;
}
```

### 二阶差分+两次前缀和

```c++
//四次单点修改
c[l]+=a;
c[l+1]-=(a-x);
c[r+1]-=(a+(r-l+1)x);
c[r+2]+=a+(r-l)x;
```

同过求**两次前缀和**就可以还原为原数组了，但求前缀和的过程需要用公式简化：

$sum[k]=\sum_{i=1}^k\sum_{j=1}^i c[j]=(k+1)*\sum_{i=1}^kc[i]-\sum_{i=1}^kc[i]*i$  => 维护c[i]与c[i]\*i

```c++
#include <bits/stdc++.h>
#define endl '\n'
#define int long long
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int, int>
#define pi acos(-1)
#define More(a, b) (((a) - (b)) > (EPS))
#define Less(a, b) (((a) - (b)) < (-EPS))
#define MoreEqu(a, b) (((a) - (b)) > (-EPS))
#define LessEqu(a, b) (((a) - (b)) < (EPS))
#define Equal(a, b) (fabs((a) - (b)) < EPS)
#define debug cout << "Error!!!SB!!!" << '\n'
// #pragma G++ optimize (2)//O2优化
#define lch (k << 1)
#define rch (k << 1 | 1)
using namespace std;

const ll mod = 1e9 + 7; // 998244353
const ll inf = 0x3f3f3f3f3f3f3f3f;
const double EPS = 1e-10;
const int base = 131; // base=13331 // hash

const int N = 2e5 + 5;
int n, m;
int a[N];
int tree1[N], tree2[N];

int lowbit(int x)
{
    return x & (-x);
}

//询问（求和）：
//(p+1)*c[i]=tree1[i]*(x+1)的和
//tree2中求c[i]*i=tree2[i]的和
int query(int x)
{
    int ans1 = 0, ans2 = 0, tp = x;
    int sum = 0;
    for (; x; x -= lowbit(x))
    {
        ans1 += tree1[x] * (tp + 1);//注意
        ans2 += tree2[x];
    }
    return ans1 - ans2;
}

//更新：tree1维护c[i]，tree2维护c[i]*i
void update(int x, int y)
{
    int tp = x;
    for (; x <= n; x += lowbit(x))
    {
        tree1[x] += y;
        tree2[x] += y * tp;
    }
}

void solve()
{
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
        cin >> a[i];

    //初始化，构建二阶差分数组并更新树状数组
    vector<int> d(n + 1);
    for (int i = 1; i <= n; i++)
        d[i] = a[i] - a[i - 1];
    for (int i = 1; i <= n; i++)
        update(i, d[i] - d[i - 1]);

    while (m--)
    {
        int op;
        cin >> op;
        if (op == 1)
        {
            int l, r, k, d;
            cin >> l >> r >> k >> d;
            update(l, k);//单点修改l
            update(l + 1, d - k);//单点修改l+1
            update(r + 1, -(k + (r - l + 1) * d));//单点修改r+1
            update(r + 2, k + (r - l) * d);//单点修改r+2
        }
        else
        {
            int p;
            cin >> p;
            cout << query(p) << endl;
        }
    }
}

signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    solve();
}
```

