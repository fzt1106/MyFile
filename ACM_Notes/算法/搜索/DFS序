# DFS序

## 定义

DFS序：每个节点在dfs过程中**进出栈的时间序列**

> 如下一棵树：
>
> ![image-20230210002516001](https://fzttypora.oss-cn-beijing.aliyuncs.com/typora_images/DFS%E5%BA%8F%E5%9B%BE%E7%A4%BA.png)
>
> 其DFS的过程为：$2,4,7,7,1,1,3,3,4,6,5,5,6,2$
>
> 其DFS序为（假设出栈不增加时间）：$in[2]=1,in[4]=2,in[7]=3,out[7]=3,in[1]=4,out[1]=4,in[3]=5,out[3]=5,out[4]=5,in[6]=6,in[7]=7,out[7]=7,out[6]=7,out[2]=7$

## 特点

+ 每个子树都对应DFS序列中的连续一段：子树4713对应4771133
+ **括号序列**：某点进出栈的时间区间是其整棵子树进出栈的时间；进入某个节点的时候记录一个左括号`(`，退出某个节点的时候记录一个右括号`)`。每个节点会出现两次。相邻两个节点的深度相差1。

由此可见，通过DFS序列，可以将**树形结构->线性结构**，并且具有**括号序列（子树构成一段连续的区间）**的特性。于是，对**子树**的操作可以转变为对**区间**的操作，这时就可以利用**线段树、树状数组**。

[例题：Propagating tree](https://codeforces.com/problemset/problem/383/C)

## 模板

```c++
int cnt=0;//记录时间节点
void dfs(int k,int pre,int h){
    in[k]=++cnt;//入栈：时间节点增加。其中in[k]也是节点k在序列中的位置
    dep[k]=h;//记录高度
    //num[cnt]=k;//新序列中第cnt个为节点k
    for(int i=0;i<edge[k].size();i++){
        if(edge[k][i]!=pre){//通过是否回溯到上一个节点来判断是否访问
            dfs(edge[k][i],k,h+1);
        }
    }
    out[k]=cnt;//出栈：时间节点不增加
}
```

```c++
#include<bits/stdc++.h>
#include<iomanip>
#define ll long long
#define ull unsigned long long
#define inf 0x3f3f3f3f3f3f3f3f
#define mod1 998244353
#define mod2 1000000007
#define P pair<int,int>
using namespace std;

const int maxn=2e5+5;
ll n,m;
int num[maxn];
int in[maxn],out[maxn],dep[maxn];
vector<int>edge[maxn];


int cnt=0;
void dfs(int k,int pre,int h){
    in[k]=++cnt;
    dep[k]=h;
    for(int i=0;i<edge[k].size();i++){
        if(edge[k][i]!=pre){
            dfs(edge[k][i],k,h+1);
        }
    }
    out[k]=cnt;
}

struct node{
    int l,r,lazy,sum;
}a[4*maxn];

void update(int k){
    a[k].sum=a[2*k].sum+a[2*k+1].sum;
}

void build(int k,int l,int r){
    a[k].l=l,a[k].r=r;
    if(l==r)return;
    int mid=(l+r)>>1;
    build(2*k,l,mid);
    build(2*k+1,mid+1,r);
    update(k);
}

void pushdown(int k){
    if(a[k].l==a[k].r){
        a[k].lazy=0;
        return;
    }
    a[2*k].sum+=a[k].lazy*(a[2*k].r-a[2*k].l+1);
    a[2*k+1].sum+=a[k].lazy*(a[2*k+1].r-a[2*k+1].l+1);
    a[2*k].lazy+=a[k].lazy;
    a[2*k+1].lazy+=a[k].lazy;
    a[k].lazy=0;
}

void change(int k,int l,int r,int x){
    if(a[k].l==l&&a[k].r==r){
        a[k].sum+=(r-l+1)*x;
        a[k].lazy+=x;
        return;
    }
    int mid=(a[k].l+a[k].r)>>1;
    if(a[k].lazy)pushdown(k);
    if(r<=mid)change(2*k,l,r,x);
    else if(l>mid)change(2*k+1,l,r,x);
    else change(2*k,l,mid,x),change(2*k+1,mid+1,r,x);
    update(k);
}

int query(int k,int l,int r){
    if(a[k].l==l&&a[k].r==r){
        return a[k].sum;
    }
    if(a[k].lazy)pushdown(k);
    int mid=(a[k].l+a[k].r)/2;
    if(r<=mid)return query(2*k,l,r);
    else if(l>mid)return query(2*k+1,l,r);
    else return query(2*k,l,mid)+query(2*k+1,mid+1,r);
}

void solve(){
    cin>>n>>m;
    for(int i=1;i<=n;i++)cin>>num[i];
    for(int i=0;i<n-1;i++){
        int x,y;
        cin>>x>>y;
        edge[x].push_back(y);
        edge[y].push_back(x);
    }
    dfs(1,1,1);
    build(1,1,n);
    while(m--){
        int op;
        cin>>op;
        if(op==1){
            int x,val;
            cin>>x>>val;
            if(dep[x]&1){
                change(1,in[x],out[x],val);
            }
            else change(1,in[x],out[x],-val);
        }
        else{
            int x;
            cin>>x;
            if(dep[x]&1){
                cout<<num[x]+query(1,in[x],in[x])<<endl;
            }
            else cout<<num[x]-query(1,in[x],in[x])<<endl;
        }
    }
}
int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);cout.tie(0);
    solve();
    return 0;
}
```

